https://eh-career.com/engineerhub/entry/2022/07/25/093000

#モジュラモノリスに移行する理由 ─ マイクロサービスの自律性とモノリスの一貫性を両立させる
## 各アーキテクチャの特徴
- モノリス
    - 単一の大きなシステム。意図的にシステムを分離するアーキテクチャを適用しなければモノリスな構成なる。
        - ソースが一つのリポジトリに集約される
        - 単一のアプリケーション、単一のDBなのでテストやデプロイが容易
        - API間のバージョン管理やネットワークのエラーハンドリングが必要ない
        - 開発の初期フェーズ、破壊的変更が多くスピードが求められる開発スタイルで有力
    - 一方で、全てが密結合になり複雑で保守性の低いシステムになりやすい(KnotPLACEはその過渡期にある)
        - システムの成長につれ、影響範囲や副作用が大きくなり見通しが悪くなる
        - 結果、開発速度の低下やバグ発生のリスク、サービスの安定性を損なうリスクが"急速に"増加する
- マイクロサービス
    - 小さなアプリケーションを独立して開発・デプロイして各APIの相互連携で動作する構成
        - 各アプリケーションや付随するDBは独立しているため任意の技術を適用できる
        - 他アプリケーションへの影響を気にせずデプロイでき、変更や障害の影響範囲が小さい
        - 疎結合な設計を強制されるため、チームの自律性が高まり、アジリティが生まれる
    - 一方で、要求される技術力や経験のハードルが比較的高く、誤るとモノリスとマイクロサービスの悪いとこどりになる(分散モノリス)
        - API間通信特有の複雑性が発生する(エラーハンドリング、トランザクション管理、通信コスト、アクセス制御など)
        - 複数のAPIの依存関係や互換性を意識した実装や、CI/CD戦略が必要
        - バグ発生時のトレーサビリティやモニタリングの拡充などDevOpsの知見や人的リソースが必要
- モジュラモノリス
    - デプロイするアプリケーションとしては1つだが、システム内部は複数のモジュールに分割されている構成
        - チームが自律するための論理的な境界をアプリケーション内で作成し、モジュールとして分割する
        - 各モジュールは独立しているのでチームの自律性を担保でき、変更の影響範囲を最小化できる
        - トランザクションやDBを分離すれば、さらに自律を促せる
    - そのためには、
        - モジュール境界を適切に定め、共通部分をできるだけ作らないという設計上の不断の注意と開発文化が必要になる
            - マイクロサービスのような疎結合な設計に向かう強制力はない
