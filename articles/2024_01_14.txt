https://eh-career.com/engineerhub/entry/2022/07/25/093000

#モジュラモノリスに移行する理由 ─ マイクロサービスの自律性とモノリスの一貫性を両立させる
##開発組織の規模やステージとの適合性
- モジュラモノリスは開発人数やチームがある程度増えてきたタイミングで、自律性や影響範囲の局所化の重要性が高まった時に効果的な選択肢になる
    - モノリスの課題の課題を解決しマイクロサービスへ向かうまでの移行パスとして選択される場合もある

##モジュラモノリスをどう実現させるか
- マイクロサービスのような、自己完結したビジネスドメインに合わせたモジュールをつくる
    - 水平方向の分割
        - ビジネスロジックと技術要素を切り離し、技術的変更に対する影響や責務を明確にしやすい
        - ビジネス的な機能追加や変更がある場合には、それぞれのモジュールに追加や変更が発生する
        - クリーンアーキテクチャ、ヘキサゴナルアーキテクチャなど
    - 垂直方向の分割
        - 複数モジュールに影響を与えずに単一のモジュールで修正を完結させるため、必要な技術要素を垂直方向に全て含んだモジュールとして定義する
        - 各モジュールがビジネス的変更に対して自律的な状態を維持し、安定した変更が可能になる
        - モジュラモノリスは水平分割＋垂直分割
    - 開発を進めていく過程で、モジュールの変更は常に発生する

##どのアーキテクチャを選ぶのか
    - モジュラモノリスが銀の弾丸ということはなく、モノリスやマイクロサービスと比べてもさまざまなトレードオフが存在する
        - モジュラモノリスは内部的にいくら分離されても最終的には単一のランタイムで実行される
            - 可用性が低い
                - 環境変数を利用して起動時に設定を切り替えられるようにする工夫はできる
                - 上記で柔軟なデプロイ(リリース制約を回避したり、チームが自律的に動くために特定の機能だけを素早く切り離したりといったこと)もできるっぽい？
            - マイクロサービスのように技術選定の自由度はない
    - モジュラモノリスかマイクロサービスかの2元論で考える必要はなく、適切に融合させることも可能
        - 一部のアプリケーションに関しては、モジュラモノリスから切り離してマイクロサービスで開発するなど
            - 認証や通知など、初めからマイクロサービスとして分離した方が費用対効果が高い機能も存在する
    - 自律性やスケーラビリティを考えると、モジュラモノリスでもDBの分離は有効な選択肢
        - ただしDBの運用方法やモジュール境界を見直す可能性を考えると、具体的に問題が顕在化していない段階で物理レベルでのDB分離を急ぐと、結果的に運用コストが高くなってしまう可能性がある
            - 論理レベルでスキーマを分割する方向もある