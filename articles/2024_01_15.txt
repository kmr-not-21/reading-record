https://speakerdeck.com/twada/working-with-legacy-code-the-true-record?slide=4

#実録レガシーコード改善
- テストのまったくないシステムを前任者から引き継いだところからはじまるエピソード
- テストも、バージョン管理も、もちろん自動化もされていない
- 「テストのないコードは悪いコードである。どれだけうまく書かれているかは関係ない。」

##レガシーと戦う
- 優先順位をつけるなら、バージョン管理->自動化->テスト
- 自動化はレバレッジが効きやすい
    - 誰か一人が自動化すれば将来の開発者含む全員が受益者になる
    - 例えばCI/CDでのビルド・テスト・デプロイの自動化
- 自動テストがないと安全なコード変更と開発の継続が困難になる
    - 手・耳・口・目での確認はコストがかかりすぎ、不安定で、FBも遅い
    - 網羅性(テストカバレッジ)はいらない。能天気な正常系(Happy Path)でいいので動く自動テストを書く
    - 既存のコードにテストだけを追加していくのはあきらめたとしても、せめて新しく書くコードだけはテストを書きながら開発する
- リファクタリングによってソフトウェアの内部の質をあげる
    - テストから設計を導き、リファクタリングし続ける
        - 「動くことを証明するため」だけのテストコードではない