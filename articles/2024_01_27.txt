https://bufferings.hatenablog.com/entry/2024/01/25/005321

# 小さく保つ、名前にこだわる、それで複雑さに立ち向かう
- DDDやヘキサゴナルアーキテクチャといったことをそんなに考えなくなった
    - 本質的に大事にしたいポイントは、どのアーキテクチャを選んでも共通するということかな
    - DDDが意味ないわけではなく(むしろ業務ドメインを捉えて適切に関心の分離を進める上では有用な思想ではあるはずだが)、実装の詳細の部分まで忠実にDDDを意識するよりも大切な根底思想があるという理解
- 大切なのは、
    - 影響範囲を小さく保つこと
    - 名前にこだわること
    - いちどに気にする範囲を小さく保って、レイヤーを分けて、意識しておくべきロジックは凝集させる
    - 1つの関数をできるだけ小さくする
    - 依存の向きは一方向にする
    - イミュータブルにする。

## トランザクション境界
- DBを小さく保つためにトランザクション境界を意識する
    - DBが肥大化するとすぐに複雑になっていく感じがする

## ユビキタス言語
- PdMが話す言葉を、そのままプログラムに持ち込む
- 無理に英語にせずに、日本語の意味のままドメインに落とし込む