# デザインパターンのトレードオフ
- プログラミングでよくある問題を解決するための実績のある解決策群
    - コードの保守性や拡張性を高めるためにこれを知り、使うことを推奨する
    - ただし現在はより便利な代替があったり、言語によっては不要なパターンがあったり、当たり前すぎてもはやパターンとして意識されないものもある
- コードが実行されているコンテキストによってトレードオフが発生する
    - 例えばマルチスレッドでシングルトンパターンを使うとパフォーマンスにマイナス影響が出る
        - 1つ目の解決策としてはクリティカルセクションに入る前にインスタンスのnullチェックをする方法がある(二重チェック)
        - 2つ目に、各スレッドごとにシングルインスタンスを持つこともできる(スレッド拘束)
        - シングルトンインスタンス(やコンポーネント)を必要なサービスに注入する方法もある(DI)
- 設計の選択に対するトレードオフと、マイナス影響の回避策を知ることが重要
    - その上で、仮説を実際に検証してデータに基づく判断をすること
    - (仮説検証のコストを嫌って知識ベースで決めきってしまいがち)