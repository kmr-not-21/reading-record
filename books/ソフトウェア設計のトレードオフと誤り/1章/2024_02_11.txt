## コードベース間の重複の場合
- 複数のチームがそれぞれの担当機能を同じコードベースで開発している中で、同じ処理を共通化せずに独立して開発しているパターン
    - この場合でも必ずしも共通化すべきとは限らない
- 重複を気にしないことのメリット
    - 開発の回転率を上げる重要な要素の一つに、チーム間で同期の必要性がないことがある
        - 同期処理のオーバーヘッドが少ないほど、問題解決のためのリソース追加によって得られる利益が大きくなる
    - つまり、コードの重複を気にせず、それぞれのチームで独立して開発を進める方がリソース追加の効果が大きいということになる
        - コードを共通化すると、2つのチームが同じソースコードを触るためお互いを妨害することになる
            - ((似たような処理や名称だからといって、同じドメインとして共通に表現するべきとは限らない、という話もありそう。
                開発効率が高い低い以前に、その処理に内包されるコンテキストがそれぞれ違うので、共通化すべきでないというパターン))
- 一方で、重複は多くのバグやミスにつながる
    - いずれか、あるいは両方のチームが同じミスをしていることがある
    - 一方のチームがミスに気づき修正したとしても、もう一方のチームの処理は改善されず別で修正が必要になる(知識が共有されない)
    - 例えばそれぞれの機能に認証処理を追加するとなったとき
            - 全ての独立したチームが正しくセキュリティを理解して実装するのは難しい
            - 多少時間がかかったとしても共有のライブラリとして開発する方が、セキュリティインシデントを防げる点で有利
- また、重複を気にしない方が開発の回転率が高いからといって、生産性が高いかというとそうではない(似たような仕事が重複して行われているため)

## ライブラリとコードベース間のコード共有
- 複数のチームで必要とされる共通処理を抽出して、別のライブラリに切り出すアプローチ
- バグを修正したり機能を改善したりすると、全てのクライアントがそれを利用して高い品質を担保でき、作業の重複が発生しない
    - デプロイプロセスを構築する必要はあるが、一度作ってしまえば何回も利用でき、以後のコストは低くなる
    - テストコードがあれば、他のチームの開発者がライブラリに貢献することも容易になる
        - テストはライブラリのマーケティング手段にもなり、総合的な品質をクライアントに保証してくれる
- このアプローチの明らかなトレードオフの一つは「それを利用するクライアントと同じ言語または言語ファミリーを利用する必要がある」ということ
    - これを解消するために、異なる言語で対象のライブラリをラップしたネイティブインターフェイスを作ることもできるが、複雑性は増す
- また、他のチームが新しいライブラリの存在を知り、必要に応じてそれを利用するための周知が必要になる
    - 加えて利用するためのドキュメントを充実させ、メンテナンスし続けることも必要
        - テストを見てライブラリの使い方を学ぶことは、その目的のために特別に書かれたテストでない限り難しい
        - ((これを実現させるのがgaugeを使ったe2eテストなので、動く仕様書としてテストを書いていきたいお気持ち))
- 別のトレードオフとして、クライアント側に依存関係の問題を生じさせる場合がある
    - 対象のライブラリと、クライアント自身がそれぞれ同じ外部ライブラリを利用している場合、バージョンの不整合で予期せぬエラーが起きる
    - このコンフリクトは原因の特定や解決が難しく、ライブラリを使う気を削がせるため、ライブラリに持たせる依存はできる限り少なくするべき