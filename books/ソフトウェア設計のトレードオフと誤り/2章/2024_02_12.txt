## 異なるマイクロサービスへのコード抽出
- ライブラリは良い出発点だが、2つの問題がある
    - ライブラリの開発に取り組む開発者はコードの互換性や依存関係含め数々の要因に気をつける必要がある
    - ライブラリのコードをクライアントがインポートすると、アプリケーションとライブラリの間が密結合の依存関係になる
- 重複する機能をビジネスドメインとして抽出できれば、個別のマイクロサービスとして機能を公開することができる
    - 例えば認証コンポーネントは、認証というビジネスドメインでトークンを検証する独立した機能を提供するのでマイクロサービス化する良い候補となる
- マイクロサービスの利点は、唯一の結合箇所であるAPI部分を除いた全てをブラックボックスとして扱うことができる点
    - ライブラリのようにコードをインポートしないので疎になる
- 一方で、分離したマイクロサービスの開発・運用は多くの計画とコストと知識が必要になる
    - デプロイプロセスとモニタリング
    - エラーハンドリング
        - マイクロサービスがダウンした時の配慮
    - トレーサビリティ
- 共有するロジックがシンプルで、多くの依存関係を持たない場合、マイクロサービスよりもライブラリとして抽出する方が合理的
    - 一方で、ロジックが複雑で別のビジネスドメインを扱うコンポーネントとして抽出する場合は、マイクロサービスを検討できる