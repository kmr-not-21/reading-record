## 1.2 なぜ単体テストを行うのか？
- 単体テストを行うことで設計がよくなるから(ただしあくまで副産物として)
    - テストを作成しづらいと感じるのであれば、そのコードの質が悪いことが推察できる
        - 通常、異なるコード同士が密結合して適切に分離できない状態になっている
    - しかし、テストを作成しやすいからといって必ずしもコードの質が良いということにはならない
        - 疎結合になっていたとしても良い設計ではないことはある
- 単体テストが成し遂げたいのは、「ソフトウェア開発プロジェクトの成長を持続可能なものにする」こと((キター!))
    - テストがないプロジェクトははじめのうちは順調に成長するがすぐに陰りが見えて、そのうち極端に開発スピードが落ちる
        - これは「ソフトウェア・エントロピー」の増加によって起こる
        - コードベースに何らかの変更を加えることは、そこにエントロピーを増やすことを意味する
        - もしリファクタリングなどの適切な処置を「常に」していなければ、すぐに秩序はなくなり複雑化する
        - コードの信頼は失われ、安定した状態には簡単には戻せない
    - テストがあれば既存のコードが正しく振る舞うことを確信し続けられる
        - はじめは労力がかかるが、すぐに報われる((確か損益分岐点は4回テスト実行した時点だったっけ))
- ただし、テストの質が悪ければやってないのとほぼ同じ結果になる
    - 何がテストの質を良くさせ、何がテストの質を悪くさせるのか？
        - 「すべてのテストケースは平等に作られているわけではない」
            - ソフトウェアの質を向上させる価値のあるテストと、そうでないテスト
            - つくるテストがどのようにプロジェクトの助けになるのか明確に描かず、ただケースを増やすことを目的として書くと質が下がる
        - テストを作成するときは、その価値と、下記のようなコストの両方を考慮しなければならない
            - プロダクションコードのリファクタリングに伴ってテストコードのリファクタリングも必要になること
            - 実施するテストケースが増え時間やシステムリソースを消費すること
            - プロダクションコードのふるまいを理解するためにテストコードを読む際の量が増えること
        - 質の良いテストケースだけが、テストスイートに含める価値がある((ズバズバ言ってくれて気持ちいい・・))
        