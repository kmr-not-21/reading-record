##5.5 アーキテクチャに対するフィードバック
- デプロイ可能性とテスト可能性を高めるために効果的なルートはふたつ
    - 最適化したモノリシックなシステムを作る
        - 小さな変更を加えられる能力と、それらを一日に何度も評価できる能力が必要
            - 多数の人々と協力して、優れた設計と継続的インテグレーションというシステムを守る手段が必要になる
    - 別々の「デプロイ可能なユニット」から構成されるようにモジュラー化する
        - マイクロサービスアーキテクチャ
            - チームが独立してサービスを開発、テスト、デプロイできるようになる
            - 一方で複数のマイクロサービスを一緒にテストすることはできない
- どちらのアプローチでも、継続的デリバリーを取り入れれば設計はよりモジュラーで、適切に抽象化され、より疎結合なものに向かっていく
    - なぜなら、設計がそのようなものにならなければ継続的デリバリーを実践できるほど効率的にシステムをテスト、デプロイできないから
    - 開発アプローチでフィードバックを重視し優先していくと、アーキテクチャがよいものになる
- 汎用性の高い原則を取り入れると、システムの品質にまで好影響が及ぶということ
    - プロセス、テクノロジー、プラクティス、文化が、ソフトウェアの品質に効いてくる

##5.6 フィードバックは早く
- フェイルファスト(早い段階で失敗せよ)

##5.7 設計品質に対するフィードバック
- ソフトウェア開発者は、うまく設計され簡単にテストできるソフトウェアを作っただけでは給料をもらえない
    - 企業のために何らかの価値を生み出さなければならない
    - 従来型の企業の大半では、これがビジネスサイドと技術サイドとの間の緊張関係になる
- この問題は、役に立つアイデアを本番システムに導入する継続的デリバリーの実現に注げば解決できる
    - 浮かんだアイデアやプロダクトの良し悪しは、ユーザーからのフィードバックを得なければわからない
    - 企業の学びを増やす
- システムのどの機能がよく使われ、どのように使われているかのデータを収集する