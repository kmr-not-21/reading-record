##6.2 組織上の漸進主義
- 小規模の独立したチームをつくり、そsれらに担当箇所の自由な書き換えを認めること
    - ただし、ある程度の秩序は与えるべきで、別個の独立したチームが同じ方向に向かうような枠組みは必要
- 人々やチームに自主性、自立性を与えること(分散化された漸進的な進歩)

##6.3 漸進主義のためのツール
- 漸進主義の実現をもっとも深いところで支えるツールはフィードバックと実験主義
- 加えて、モジュラー性と関心の分離
    - リファクタリング
    - バージョン管理
    - 自動テストとテスト駆動開発
        - テストが設計におけるモジュラー性と関心の分離に影響を与える
            - 否応なしに小さい実行可能な仕様を描くことになる
            - テストの管理下で振る舞いを実行し、結果を評価する
        - テストをできる限りシンプルに保ち、テスト可能なコードでシステムを設計する

##6.4 コード変更が与える影響の最小化
- 多数の小さなステップで前進することを追求する
    - システムをより独立性の高い部品に分解する
        - ポートアンドアダプターパターン(ヘキサゴナルアーキテクチャ)
    - 加えた変更をひとつにまとめるときに得られるフィードバックのスピードと品質をあげる
        - CI/CD

##6.5 漸進的な設計
- アジャイルが大事なのは、答えがすべてわかっていなくても仕事を始められるということだから
- 知識が深まっていくにつれて修正が必要になったり、間違えたり、予想外の影響が生じたりするのは避けられないことを受け入れる
    - これはソフトウェアに限らずあらゆる複雑な創造物の現実であり、ソフトウェアの本質的な性質
    - 自分の無知を受け入れ、自分の知識を疑い、早く学ぶために努力することは、ドグマから工学に向かうための第一歩
- 複雑さ管理は、私たちの「一歩前進」が誤りだったときの「爆発半径」を最小に抑えるという点で死活的に重要
    - 今必要だということがわかっていないことのためにコードを書かない
    - 同時に、関心の分離は必ずすることで新しい知識を学んだときに簡単に書き換えられるコードを維持する
        - 漸進的に成長させていけるコードを書く