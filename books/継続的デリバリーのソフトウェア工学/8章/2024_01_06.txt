#第8章 実験主義
##8.1 「実験主義であること」とはどういう意味か
- アプローチとしての「実験主義であること」を特徴づけるのは、
    - フィードバック
        - 実験が明確なシグナルを与えてくれるようにする
    - 仮説
    - 計測
    - 変数の管理
        - 実験が送ってくるシグナルを理解できるように変数をできる限り減らす

##8.2 フィードバック
- 工学的な観点からは、フィードバックのスピードアップと品質の効果を認識することが大切

##8.5 変数の管理
- バージョン管理をすれば、本番システムにシステムをリリースしたコード変更の内容を正確に把握できる
- 自動テストをすれば、ソフトウェアのふるまい、スピード、ロバストネスなどを正確に把握できる
- CI/CDを取り入れれば、ソフトウェアが動作する環境をより正確に把握できる
    - 汎用的なアプローチとしてはるかに大きな自信のもとで前進できるようにしてくれる存在
        - 技術的変数の多くを取り除いてくれるため
    - ソフトウェアが常にリリースできる状態であり続けるようにするための手法
        - 中心にある考え方は、
            - 自分たちの仕事の品質について最大限のフィードバックを得られるようにすること
            - 小さなステップで仕事をする方向に強く誘導しようということ
                - これは、反復的、漸進的であることを強制される

##8.6 実験としての自動テスト
- ソフトウェア開発の分野で群を抜いて柔軟な実験形態は、自動テスト
- コードを書いた後では実験の価値が下がる
    - コードが正しく動作するかどうかは仮説としては貧弱
        - (正しさが何であるか、という仮説でないから)
- テスト駆動開発はシステムのふるまいについての実行可能な仕様としてテストを使う戦略
    - 期待されるふるまいについて小さな予測を立てて実験することを繰り返しながら進められる
- 受け入れテスト駆動開発(ATDD)やユニットテスト(UT)などさまざまな粒度で実践できる
- TDDを取り入れた開発は、顕著にバグがすくなるという調査結果がある(40%から250%減)

##8.7 実験としてのテストの結果が持つ意味
- ソフトウェアが属する「宇宙」を完全なかたちで作り、制御できるため、無数の実験を生み出せる(統計学を味方につけられる)
- 私たちの書いたすべてのテスト(管理された宇宙の中でシステムがどのようにふるまうかについての理解とそれを確認するための実験群)が、知識の本体になる
    - 宇宙の定義(システム)と知識の本体(テスト)を誰とでも共有でき、それを実行することで誰もが正しい状態であることを確認できる

