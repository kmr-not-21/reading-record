序文

- さまざまなプラクティスを同時に使う時の矛盾やひとつのプラクティスから生まれる混乱に触れることを回避せず、徹底的に説明してくれる
    - これらの間のバランスと緊張関係が「よりよい」システムをつくる
    - プラクティスはあくまでガイドラインだということを理解し、そのコストとメリットを理解し、コード/設計/アーキテクチャーを見るためのレンズとしてプラクティスを扱い、ときには正しいか間違っているか、白か黒かの二者択一ではなく、バランスをとることが大切なのです。
    - ハッピーエンジニアリング！


はじめに
- 本書は、ソフトウェア工学に工学を取り戻す試みです
- **形式張らない小さな実験の連続として仕事を組み立て、フィードバックを集めて学びを充実させれば、私たちが飛び込んでいる問題空間を深く知り、より意識的に仕事を進められるようになります**
    - このアプローチは、答えがわかっていない場合でも、どこで何にフォーカスすべきかについての指針を与えてくれます。直面する難題の性質に関わらず、成功の可能性を広げてくれます。
- 一つひとつの考え方や概念がひとつにまとまって、あらゆる意思決定の指導原理として使われるようになれば、それはソフトウェア開発の新しいパラダイムになります。
- **工学とは、経済的な制約の範囲内で実際的な問題を解決するために、科学的合理主義のアプローチをとること**です。定義上、実際的、実用的なものです。
    - 学問分野の概念は汎用的で長持ちし広く浸透するはずです
    - 工学とはつまり、「役立つもの」のこと。役立たないのならそれは本物の工学ではない
- **ソフトウェア工学とは、ソフトウェアの実際的な問題に対する効率的、経済的な解を見つけるための経験的、科学的なアプローチの応用のこと**である
    - ソフトウェア開発は、基本的に学びと発見の分野なので、**学びのエキスパート**にならなければならない。科学と工学は効果的に学ぶための手段である
    - システムは本質的に複雑なもので、ますますその複雑度は上がっているので、そのようなものの開発に立ち向かうためには、**複雑さ管理のエキスパート**にならなければならない。

第一章　イントロダクション

- ソフトウェア開発に工学的なアプローチを取り入れることが重要である大きな理由はふたつあります
    - ソフトウェア開発が常に発見と学びの連続であること
    - 効率的で経済的であることを目指すなら学びの能力は持続可能なものでなければならないこと
        - つまり、新しいことを学び、考えを修正する能力を保てるようにするために、作っているシステムの複雑さを管理しなければならないということ
- 学びのエキスパートになるためには、具体的に次の５つが必要です
    - 反復的な作業(iteration)
    - フィードバック(feedback)
    - 漸進主義(incrementalism)
    - 実験主義(experimentation)
    - 経験主義(empiricism)
- このような仕事の仕方で安全に前進するためには、学びをとことん重視するのと同時に、方向性さえ不確かな場合でも、先に進めるような仕事の仕方が必要になってくる
    - 直面する問題とその複雑さに対処できるかどうか＝複雑さ管理
- 複雑さ管理のエキスパートになるためには、次の5つを実現する必要がある。
    - モジュラー性(modularity)
    - 凝集度(cohesion)
    - 関心の分離(separation of concerns)
    - 抽象化(abstraction)
    - 疎結合(loose coupling)
- これらを有機的に結びつけ、ソフトウェア開発に対する一貫性のあるアプローチのなかに位置付け、これらのポテンシャルを最大限に引き出せるようにすること
- その上で、あらゆるソフトウェア開発で効果的な戦略を展開するために役立つ実践的なツールとなる要素が5つある
    - テスト可能性(testability)
    - デプロイ可能性(depoyability)
    - スピード(speed)
    - 変数の管理(controlling the variables)
    - 継続的デリバリー(continuous delivery)

1.3 ソフトウェア工学の再生

- 古くから確立されているけれども間違った考えを論破し新しくてまだ試されていないがすぐれているかもしれない考えを評価するためにはどうすればよいか
    - 教条を論破し、流行や古臭い間違った考え方と、偉大なアイデアとを区別できるアプローチ。それが「科学」。実践的、実用的な問題を解決するためにこれを応用するのが「工学」。
    - ソフトウェア開発を本物の工学分野として扱うことは、科学的手法と科学的合理主義の哲学に根ざしている
    - 工学としてのソフトウェア開発というアプローチは、より効果的に学べて、より効率よく間違った考え方を捨てられるアプローチ
    - これができると、木ではなく森を見られるようになるし、単純・効率的で信頼できる視覚が得られる
    - 官僚主義を強化するのではなく、高品質なソフトウェアを作る能力をより持続的に、より信頼できる形で拡大しようということ