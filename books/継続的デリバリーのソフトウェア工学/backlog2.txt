第2章 工学とは何か

2.1 私たちにとって製造は問題ではない

- 工業化時代とその思考法の産物である私たちは、少しでも腰を据えて仕事をしようとすると、ほとんど何も考えずに自動的に製造、生産の心配をしてしまう。
    - その結果、製造現場の思考法をソフトウェア産業に応用しようとしてきた
        - **ウォーターフォールプロセスは、大量生産のための道具**
        - これはソフトウェア開発でもっとも大切な発見、学び、実験のためのツールではない
    - ソフトウェア開発における製造は、ビルドボタンをクリックすることだけ
        - 自動で実行され、スケーラブルで、低コストになるはずので、何も問題ではない

2.2 製造工学ではなく設計工学

- 橋梁建設においても、新種の橋を設計する場合には設計という難しい問題がある
    - 物理的なもののため簡単にイテレートできない
    - そのためソフトウェア以外の工学の分野では、モデリングのテクニックが取り入れられている。ただしそれらは実際の橋に近いものでしかない。
    - その点ソフトウェアは、つくっているものの形が私たちのプロダクトそのもの
    - つまり、モデルが現実と一致しているかどうかを気にしなくて済む
    - 確認、検証ができるし、橋に比べれば改造することも簡単
- 科学は難しく、高くつくので、通常のソフトウェア開発に科学を組み込むのは不可能だと思われてきたが、これは誤り
    - 科学的合理主義(=工学?)は数学的な正確度を追求するものではない
- ソフトウェアが他のすべての工学分野よりも顕著に有利なのは、ソフトウェアでつくるモデルを実行して仕事の結果を示せること
    - テストすると、推量ではなく製品そのものをテストしたことになる
    - システムのなかの調べたい部分をほかの部分から慎重に切り離すことができる
    - そのため現実世界をはるかに正確、詳細に表現できる
- **ソフトウェア開発は、物理的なものの生産、製造とは異なり、発見、学び、設計がすべて**
    - 私たちに求められているのは探索なので、宇宙船の設計者たち以上に、製造工学のテクニックではなく**探索のテクニックを使わなければならない**
    - ソフトウェア工学は、純粋に設計工学である
- 失敗の形、私たちがどのように間違えるかを重視
    - 「私はエラーに強い興味がありました。特定のエラー、またはエラータイプがなぜ発生し、将来どのようにすれば防げるかを考え出すと止まりませんでした」
    - **最初から正しく計画を立てることなどできないという前提のもとに、あらゆるアイデア、ソリューション、設計を懐疑的に評価していく**
    - **現実に直面して驚かされることはあるが、それは工学の経験主義が機能しているということ**
- フェイルセーフ（安全に失敗する）
    - すべてのシナリオをコーディングし尽くすことはできないという前提のもとに、システムが予想外のことにぶつかってもそれをうまく処理して前進できるようにする
    - **ものごとがうまくいかなくなる状況を想像する習慣という工学的な思考スタイル**